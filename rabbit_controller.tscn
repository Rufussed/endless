[gd_scene load_steps=4 format=3 uid="uid://c30cv2kefnoev"]

[ext_resource type="PackedScene" uid="uid://cupcup5unvgmt" path="res://rabbit.tscn" id="1_lvefo"]

[sub_resource type="GDScript" id="GDScript_mtfu3"]
script/source = "extends CharacterBody3D

# Physics parameters - adjust these in the Inspector
@export var initial_forward_speed: float = 0.0  # Starting speed
@export var max_forward_speed: float = 20.0  # Maximum forward speed
@export var min_forward_speed: float = 10.0  # Minimum forward speed
@export var forward_acceleration: float = 4.0  # Will reach max speed in 5 seconds
@export var boost_acceleration: float = 8.0  # Extra acceleration when pressing W
@export var deceleration: float = 8.0  # Deceleration when pressing S
@export var jump_force: float = 10.0  # Increased for better jump height
@export var gravity: float = 30.0  # Increased to ensure player comes down
@export var lateral_force: float = 20.0  # Force applied when moving sideways
@export var mass: float = 3.0  # Character's mass
@export var lateral_drag: float = 0.9  # Drag coefficient to slow down sideways movement
@export var max_lateral_speed: float = 8.0  # Maximum sideways speed

# Double jump settings
@export var double_jump_enabled: bool = true
@export var double_jump_force: float = 10.0  # Set equal to the first jump force
@export var debug_jumps: bool = false  # Enable for troubleshooting

# State variables
var is_jumping: bool = false
var jump_count: int = 0
var max_jumps: int = 2  # Set to 2 for double jump
var current_forward_speed: float = 0.0  # Track current speed
var was_on_floor: bool = false  # Track previous floor state

# Add signals for game events
signal player_died

# Add enhanced signals for animation control
signal player_jumped(is_double_jump)
signal player_landed

# Animation control
@export var animation_node_path: NodePath = \"rabbit/AnimationPlayer\"
var animation_player: AnimationPlayer = null

# Add death threshold
@export var death_y_threshold: float = -10.0  # Player dies if they fall below this Y position
@export var reset_z_threshold: float = -560.0  # Reset player when Z goes below this value

var paused_at_frame_10 = false

func _ready():
	# Initialize starting speed - this will use the value from Inspector if set there
	current_forward_speed = initial_forward_speed
	
	# Ensure jump count starts at 0
	jump_count = 0
	was_on_floor = is_on_floor()

	# Get the animation player if path is valid
	if !animation_node_path.is_empty():
		animation_player = get_node_or_null(animation_node_path)

	# Make sure physics is properly initialized
	move_and_slide()
	
	# Find the player node and connect to its signals
	var player = get_tree().get_first_node_in_group(\"player\")
	if player:
		player.connect(\"player_jumped\", Callable(self, \"_on_player_jumped\"))
		player.connect(\"player_landed\", Callable(self, \"_on_player_landed\"))
	
	# Start playing animation
	if animation_player:
		animation_player.play(\"hop\")

func _physics_process(delta):
	# More reliable floor detection
	var on_floor_now = is_on_floor()
	
	# Reset jump count when landing on the floor
	if on_floor_now and !was_on_floor:
		jump_count = 0
		is_jumping = false
		emit_signal(\"player_landed\")  # Emit signal when landing
	
	# Update previous floor state
	was_on_floor = on_floor_now
	
	# Custom input handling for both WASD and arrow keys
	var up_input = Input.is_action_pressed(\"ui_up\") || Input.is_key_pressed(KEY_W)
	var down_input = Input.is_action_pressed(\"ui_down\") || Input.is_key_pressed(KEY_S)
	var left_input = Input.is_action_pressed(\"ui_left\") || Input.is_key_pressed(KEY_A)
	var right_input = Input.is_action_pressed(\"ui_right\") || Input.is_key_pressed(KEY_D)
	
	# Calculate speed input (-1 to +1)
	var speed_input = 0.0
	if up_input: speed_input += 1.0
	if down_input: speed_input -= 1.0
	
	# Handle speed changes based on input
	if speed_input > 0:
		# Boost with W or Up
		current_forward_speed += (forward_acceleration + boost_acceleration) * delta
	elif speed_input < 0:
		# Slow down with S or Down
		current_forward_speed -= deceleration * delta
	else:
		# Normal acceleration
		current_forward_speed += forward_acceleration * delta
	
	# Clamp speed between min and max
	current_forward_speed = clamp(current_forward_speed, min_forward_speed, max_forward_speed)
	
	# Apply current forward movement
	velocity.z = -current_forward_speed
	
	# Calculate lateral input (-1 to +1)
	var lateral_input = 0.0
	if right_input: lateral_input += 1.0
	if left_input: lateral_input -= 1.0
	
	# Handle lateral movement with forces
	if lateral_input != 0:
		var force = lateral_input * lateral_force
		var acceleration = force / mass
		velocity.x += acceleration * delta
	
	# Apply drag to slow down when no input
	velocity.x *= lateral_drag
	
	# Clamp lateral speed
	velocity.x = clamp(velocity.x, -max_lateral_speed, max_lateral_speed)
	
	# Apply gravity more consistently
	velocity.y -= gravity * delta
	
	# Check if player has fallen below the death threshold
	if global_position.y < death_y_threshold:
		emit_signal(\"player_died\")
	
	# Check if player has gone too far in Z direction
	if global_position.z < reset_z_threshold:
		# Reset only Z position to zero, keeping X and Y as is
		global_position.z = 0
		# Optional: reset forward speed if you want a fresh start
		current_forward_speed = initial_forward_speed
	
	# Move the character
	move_and_slide()

func jump():
	# First jump from the ground
	if is_on_floor():
		velocity.y = jump_force
		is_jumping = true
		jump_count = 1
		emit_signal(\"player_jumped\", false)  # Emit signal for first jump
	# Double jump in the air
	elif double_jump_enabled and jump_count < max_jumps:
		# Reset any downward momentum to ensure full jump height
		velocity.y = 0
		# Apply the same jump force as the first jump
		velocity.y = double_jump_force
		jump_count = max_jumps  # Use all available jumps
		is_jumping = true
		emit_signal(\"player_jumped\", true)  # Emit signal for double jump

func _input(event):
	# Handle jump input with both Space and other possible keys
	if event is InputEventKey and event.pressed:
		if event.keycode == KEY_SPACE:
			jump()
		# Toggle debug mode with F3
		elif event.keycode == KEY_F3:
			debug_jumps = !debug_jumps

func _on_player_jumped(is_double_jump = false):
	if animation_player:
		# Continue playing until frame 10
		animation_player.seek(0.1)  # Frame 10 at 0.1 seconds (assuming 30fps)
		animation_player.pause()
		paused_at_frame_10 = true

func _on_player_landed():
	if animation_player and paused_at_frame_10:
		# Resume animation
		animation_player.play()
		paused_at_frame_10 = false

# Add the reset method to match the signal connection in the scene
func _on_game_manager_reset_player_requested(reset_position):
	# Immediately set position
	global_position = reset_position
	# Reset physics
	velocity = Vector3.ZERO
	current_forward_speed = initial_forward_speed
	is_jumping = false
	jump_count = 0  # Reset jump count on game reset
"

[sub_resource type="CapsuleShape3D" id="CapsuleShape3D_yv3m6"]

[node name="RabbitController" type="CharacterBody3D"]
script = SubResource("GDScript_mtfu3")

[node name="CollisionShape3D" type="CollisionShape3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0)
shape = SubResource("CapsuleShape3D_yv3m6")

[node name="rabbit" parent="." instance=ExtResource("1_lvefo")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.00561106, 0.0472157, 0.212888)
